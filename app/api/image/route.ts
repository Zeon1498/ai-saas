import { auth } from "@clerk/nextjs";
import { NextResponse } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface MyRequest {
    json(): Promise<any>; // Assuming you only need to parse JSON from the request
  }

export async function POST(req: MyRequest) {
  try {
    // Authentication check
    const { userId } = auth();
    if (!userId) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    // OpenAI API Key check
    if (!openai) {
      return new NextResponse("OpenAI API Key not configured", { status: 500 });
    }

    // Validate request body
    const body = await req.json();
    const { prompt, amount = 1, resolution = "512x512" } = body;

    if (!prompt) {
      return new NextResponse("Prompt is required", { status: 400 });
    }

    const numAmount = parseInt(amount, 10);
    if (isNaN(numAmount) || numAmount < 1) {
      return new NextResponse("Invalid amount", { status: 400 });
    }

    if (!resolution) {
      return new NextResponse("Resolution is required", { status: 400 });
    }

    // Call OpenAI API (focus debugging here)
    const response = await openai.images.generate({
      model: "dall-e-2",
      prompt,
      n: numAmount,
      size: resolution,
    });

    // Check for successful image generation (investigate here)
    if (!response.data || response.data.length === 0) {
      console.error("[IMAGE_ERROR]", "No images generated by OpenAI API");
      return new NextResponse("Internal error", { status: 500 });
    }

    const image_url = response.data[0].url; // Assuming first image URL

    // Return image URL
    return NextResponse.json({ url: image_url });

  } catch (error) {
    console.error("[IMAGE_ERROR]", error);
    return new NextResponse("Internal error", { status: 500 });
  }
}
